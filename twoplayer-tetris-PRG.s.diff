--- orig
+++ mod
@@ -1,11 +1,11 @@
 ; Input file: build/tetris-PRG.bin
 ; Page:       1
 
 
         .setcpu "6502"
-
+.include "../twoplayer.inc"
 tmp1            := $0000
 tmp2            := $0001
 tmp3            := $0002
 tmpBulkCopyToPpuReturnAddr:= $0005
 patchToPpuAddr  := $0014
@@ -251,20 +251,20 @@ initRam:ldx     #$00
 nmi:    pha
         txa
         pha
         tya
         pha
+        jsr     render
+        jmp_ie  copyOamStagingToOam_mod
         lda     #$00
         sta     oamStagingLength
-        jsr     render
         dec     sleepCounter
         lda     sleepCounter
         cmp     #$FF
         bne     @jumpOverIncrement
         inc     sleepCounter
 @jumpOverIncrement:
-        jsr     copyOamStagingToOam
         lda     frameCounter
         clc
         adc     #$01
         sta     frameCounter
         lda     #$00
@@ -447,21 +447,21 @@ gameModeState_updatePlayer2:
         cmp     #$02
         bne     @ret
         jsr     makePlayer2Active
         jsr     branchOnPlayStatePlayer2
         jsr     stageSpriteForCurrentPiece
-        jsr     savePlayer2State
+        jsr_i   savePlayer2State_mod    ;jsr     savePlayer2State
 @ret:   inc     gameModeState
         rts
 
 gameMode_playAndEndingHighScore:
         lda     gameModeState
         jsr     switch_s_plus_2a
         .addr   gameModeState_initGameBackground
         .addr   gameModeState_initGameState
         .addr   gameModeState_updateCountersAndNonPlayerState
-        .addr   gameModeState_handleGameOver
+        addr_i  gameModeState_handleGameOver_mod
         .addr   gameModeState_updatePlayer1
         .addr   gameModeState_updatePlayer2
         .addr   gameModeState_checkForResetKeyCombo
         .addr   gameModeState_startButtonHandling
         .addr   gameModeState_vblankThenRunState2
@@ -517,12 +517,12 @@ gameMode_legalScreen:
         jsr     changeCHRBank0
         lda     #$00
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   legal_screen_palette
-        jsr     bulkCopyToPpu
-        .addr   legal_screen_nametable
+        jsr     copyRleNametableToPpu           ;jsr     bulkCopyToPpu
+        .addr   legal_screen_nametable_rle      ;.addr   legal_screen_nametable
         jsr     waitForVBlankAndEnableNmi
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jsr     updateAudioWaitForNmiAndEnablePpuRendering
         jsr     updateAudioWaitForNmiAndResetOamStaging
         lda     #$00
@@ -763,18 +763,18 @@ gameMode_levelMenu:
         jsr     changeCHRBank0
         lda     #$00
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   menu_palette
-        jsr     bulkCopyToPpu
-        .addr   level_menu_nametable
+        jsr_i   gameMode_levelMenu_nametable_mod        ;jsr     bulkCopyToPpu
+        nop_rep 2                                       ;.addr   level_menu_nametable
         lda     gameType
         bne     @skipTypeBHeightDisplay
         jsr     bulkCopyToPpu
         .addr   height_menu_nametablepalette_patch
 @skipTypeBHeightDisplay:
-        jsr     showHighScores
+        jsr     showHighScores_real                     ;jsr     showHighScores
         jsr     waitForVBlankAndEnableNmi
         jsr     updateAudioWaitForNmiAndResetOamStaging
         lda     #$00
         sta     PPUSCROLL
         lda     #$00
@@ -824,12 +824,12 @@ gameMode_levelMenu_processPlayer1Navigat
 @startAndANotPressed:
         lda     #$00
         sta     gameModeState
         lda     #$02
         sta     soundEffectSlot1Init
-        inc     gameMode
-        rts
+        jmp_i   gameMode_levelMenu_processPlayer2Navigation     ;inc     gameMode
+                                                                ;rts
 
 @checkBPressed:
         lda     newlyPressedButtons_player1
         cmp     #$40
         bne     @chooseRandomHole_player1
@@ -842,23 +842,23 @@ @chooseRandomHole_player1:
         ldx     #$17
         ldy     #$02
         jsr     generateNextPseudorandomNumber
         lda     rng_seed
         and     #$0F
-        cmp     #$0A
+        cmp     #$09    ;#$0A
         bpl     @chooseRandomHole_player1
         sta     player1_garbageHole
 @chooseRandomHole_player2:
         ldx     #$17
         ldy     #$02
         jsr     generateNextPseudorandomNumber
         lda     rng_seed
         and     #$0F
-        cmp     #$0A
+        cmp     #$09    ;#$0A
         bpl     @chooseRandomHole_player2
         sta     player2_garbageHole
-        jsr     updateAudioWaitForNmiAndResetOamStaging
+        jmp_i   gameMode_levelMenu_processPlayer1Navigation_processPlayer2      ;jsr     updateAudioWaitForNmiAndResetOamStaging
         jmp     gameMode_levelMenu_processPlayer1Navigation
 
 ; Starts by checking if right pressed
 gameMode_levelMenu_handleLevelHeightNavigation:
         lda     newlyPressedButtons
@@ -1036,12 +1036,12 @@ gameModeState_initGameBackground:
         jsr     changeCHRBank0
         lda     #$03
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   game_palette
-        jsr     bulkCopyToPpu
-        .addr   game_nametable
+        jmp_ie  initGameBackground_mod  ;jsr     bulkCopyToPpu
+        nop_rep 2                       ;.addr   game_nametable
         lda     #$20
         sta     PPUADDR
         lda     #$83
         sta     PPUADDR
         lda     gameType
@@ -1123,12 +1123,12 @@ game_typeb_nametable_patch:
         .byte   $FE,$23,$57,$3D,$3E,$3E,$3E,$3E
         .byte   $3E,$3E,$3F,$FD
 gameModeState_initGameState:
         lda     #$EF
         ldx     #$04
-        ldy     #$04
-        jsr     memset_page
+        ldy     #$05                    ;ldy     #$04
+        jsr_i   initGameState_mod       ;jsr     memset_page
         ldx     #$0F
         lda     #$00
 ; statsByType
 @initStatsByType:
         sta     $03EF,x
@@ -1175,12 +1175,12 @@ @initStatsByType:
         sta     player1_autorepeatY
         sta     player2_autorepeatY
         jsr     chooseNextTetrimino
         sta     player1_currentPiece
         sta     player2_currentPiece
-        jsr     incrementPieceStat
-        ldx     #$17
+        jsr_i   incrementPieceStat_mod
+        ldx     #personal_rng           ;ldx     #$17
         ldy     #$02
         jsr     generateNextPseudorandomNumber
         jsr     chooseNextTetrimino
         sta     nextPiece
         sta     twoPlayerPieceDelayPiece
@@ -1374,15 +1374,15 @@ gameModeState_updateCountersAndNonPlayer
         inc     player2_fallTimer
         lda     twoPlayerPieceDelayCounter
         beq     @checkSelectButtonPressed
         inc     twoPlayerPieceDelayCounter
 @checkSelectButtonPressed:
-        lda     newlyPressedButtons_player1
-        and     #$20
+        jsr_i   gameModeState_updateCountersAndNonPlayerState_mod       ;lda     newlyPressedButtons_player1
+        nop                                                             ;and     #$20
         beq     @ret
         lda     displayNextPiece
-        eor     #$01
+        eor     #$03                                                    ;eor     #$01
         sta     displayNextPiece
 @ret:   inc     gameModeState
         rts
 
 rotate_tetrimino:
@@ -1569,17 +1569,17 @@ stageSpriteForCurrentPiece:
         lda     numberOfPlayers
         cmp     #$01
         beq     L8A2C
         lda     generalCounter3
         sec
-        sbc     #$40
+        sbc     #$50    ;sbc     #$40
         sta     generalCounter3
         lda     activePlayer
         cmp     #$01
         beq     L8A2C
         lda     generalCounter3
-        adc     #$6F
+        adc     #$8F    ;adc     #$6F
         sta     generalCounter3
 L8A2C:  clc
         lda     tetriminoY
         rol     a
         rol     a
@@ -1717,12 +1717,12 @@ L8B9D:  lda     orientationTable,y
         bne     L8B9D
         stx     oamStagingLength
         rts
 
 stageSpriteForNextPiece:
-        lda     displayNextPiece
-        bne     @ret
+        jmp_i   stageSpriteForNextPiece_player1_mod     ;lda     displayNextPiece
+        nop                                             ;bne     @ret
         lda     #$C8
         sta     spriteXOffset
         lda     #$77
         sta     spriteYOffset
         ldx     nextPiece
@@ -1899,28 +1899,53 @@ sprite03PausePalette6:
 sprite05PausePalette4:
         .byte   $00,$19,$00,$00,$00,$0A,$00,$08
         .byte   $00,$1E,$00,$10,$00,$1C,$00,$18
         .byte   $00,$0E,$00,$20,$FF
 sprite06TPiece:
+.ifndef NEXT_ON_TOP
         .byte   $00,$7B,$02,$FC,$00,$7B,$02,$04
         .byte   $00,$7B,$02,$0C,$08,$7B,$02,$04
+.else
+        .byte   $00,$7B,$02,$00,$00,$7B,$02,$08
+        .byte   $00,$7B,$02,$10,$08,$7B,$02,$08
+.endif
         .byte   $FF
 sprite07SPiece:
+.ifndef NEXT_ON_TOP
         .byte   $00,$7D,$02,$04,$00,$7D,$02,$0C
         .byte   $08,$7D,$02,$FC,$08,$7D,$02,$04
+.else
+        .byte   $00,$7D,$02,$08,$00,$7D,$02,$10
+        .byte   $08,$7D,$02,$00,$08,$7D,$02,$08
+.endif
         .byte   $FF
 sprite08ZPiece:
+.ifndef NEXT_ON_TOP
         .byte   $00,$7C,$02,$FC,$00,$7C,$02,$04
         .byte   $08,$7C,$02,$04,$08,$7C,$02,$0C
+.else
+        .byte   $00,$7C,$02,$00,$00,$7C,$02,$08
+        .byte   $08,$7C,$02,$08,$08,$7C,$02,$10
+.endif
         .byte   $FF
 sprite09JPiece:
+.ifndef NEXT_ON_TOP
         .byte   $00,$7D,$02,$FC,$00,$7D,$02,$04
         .byte   $00,$7D,$02,$0C,$08,$7D,$02,$0C
+.else
+        .byte   $00,$7D,$02,$00,$00,$7D,$02,$08
+        .byte   $00,$7D,$02,$10,$08,$7D,$02,$10
+.endif
         .byte   $FF
 sprite0ALPiece:
+.ifndef NEXT_ON_TOP
         .byte   $00,$7C,$02,$FC,$00,$7C,$02,$04
         .byte   $00,$7C,$02,$0C,$08,$7C,$02,$FC
+.else
+        .byte   $00,$7C,$02,$00,$00,$7C,$02,$08
+        .byte   $00,$7C,$02,$10,$08,$7C,$02,$00
+.endif
         .byte   $FF
 sprite0BOPiece:
         .byte   $00,$7B,$02,$00,$00,$7B,$02,$08
         .byte   $08,$7B,$02,$00,$08,$7B,$02,$08
         .byte   $FF
@@ -2369,20 +2394,40 @@ render_mode_play_and_demo:
         lda     #$00
         sta     player1_vramRow
         jmp     @renderPlayer2Playfield
 
 @playStateNotDisplayLineClearingAnimation:
+; 0 for original. 1 for fast. 2 for fast row4
+.define FASTROWTOVRAM 2
+.if FASTROWTOVRAM <> 2
         lda     player1_vramRow
         sta     vramRow
         lda     #$04
         sta     playfieldAddr+1
+.if FASTROWTOVRAM = 0
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
+.else
+        .import copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+.endif
         lda     vramRow
         sta     player1_vramRow
+.else
+        ldx     player1_vramRow
+        lda     #$00
+        .import copyPlayfieldRowToVRAM4
+        jsr     copyPlayfieldRowToVRAM4
+        stx     player1_vramRow
+        jmp     @renderPlayer2Playfield
+        nop_rep 12
+.endif
 @renderPlayer2Playfield:
         lda     numberOfPlayers
         cmp     #$02
         bne     @renderLines
         lda     player2_playState
@@ -2410,20 +2455,36 @@ @renderPlayer2Playfield:
         lda     #$00
         sta     player2_vramRow
         jmp     @renderLines
 
 @player2PlayStateNotDisplayLineClearingAnimation:
+.if FASTROWTOVRAM <> 2
         lda     player2_vramRow
         sta     vramRow
         lda     #$05
         sta     playfieldAddr+1
+.if FASTROWTOVRAM = 0
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
+.else
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+.endif
         lda     vramRow
         sta     player2_vramRow
+.else
+        ldx     player2_vramRow
+        lda     #$01
+        jsr     copyPlayfieldRowToVRAM4
+        stx     player2_vramRow
+        jmp     @renderLines
+        nop_rep 12
+.endif
 @renderLines:
         lda     outOfDateRenderFlags
         and     #$01
         beq     @renderLevel
         lda     numberOfPlayers
@@ -2441,36 +2502,36 @@ @renderLines:
         and     #$FE
         sta     outOfDateRenderFlags
         jmp     @renderLevel
 
 @renderLinesTwoPlayers:
-        lda     #$20
+        lda     #>INGAME_LAYOUT_P1_LINES        ;lda     #$20
         sta     PPUADDR
-        lda     #$68
+        lda     #<INGAME_LAYOUT_P1_LINES        ;lda     #$68
         sta     PPUADDR
         lda     player1_lines+1
         sta     PPUDATA
         lda     player1_lines
         jsr     twoDigsToPPU
-        lda     #$20
+        lda     #>INGAME_LAYOUT_P2_LINES        ;lda     #$20
         sta     PPUADDR
-        lda     #$7A
+        lda     #<INGAME_LAYOUT_P2_LINES        ;lda     #$7A
         sta     PPUADDR
         lda     player2_lines+1
         sta     PPUDATA
         lda     player2_lines
         jsr     twoDigsToPPU
         lda     outOfDateRenderFlags
         and     #$FE
         sta     outOfDateRenderFlags
 @renderLevel:
-        lda     outOfDateRenderFlags
-        and     #$02
-        beq     @renderScore
         lda     numberOfPlayers
         cmp     #$02
         beq     @renderScore
+        lda     outOfDateRenderFlags
+        and     #$02
+        beq     @renderScore
         ldx     player1_levelNumber
         lda     levelDisplayTable,x
         sta     generalCounter
         lda     #$22
         sta     PPUADDR
@@ -2481,12 +2542,13 @@ @renderLevel:
         jsr     updatePaletteForLevel
         lda     outOfDateRenderFlags
         and     #$FD
         sta     outOfDateRenderFlags
 @renderScore:
-        lda     numberOfPlayers
-        cmp     #$02
+        jmp_i   renderPlay_mod  ;lda     numberOfPlayers
+        nop                     ;cmp     #$02
+.export after_renderPlay_mod := *
         beq     @renderStats
         lda     outOfDateRenderFlags
         and     #$04
         beq     @renderStats
         lda     #$21
@@ -2534,13 +2596,14 @@ @renderTetrisFlashAndSound:
         lda     #$3F
         sta     PPUADDR
         lda     #$0E
         sta     PPUADDR
         ldx     #$00
-        lda     completedLines
-        cmp     #$04
-        bne     @setPaletteColor
+        lda     player1_completedLines
+        ora     player2_completedLines
+        and     #$04
+        beq     @setPaletteColor
         lda     frameCounter
         and     #$03
         bne     @setPaletteColor
         ldx     #$30
         lda     frameCounter
@@ -2549,16 +2612,17 @@ @renderTetrisFlashAndSound:
         lda     #$09
         sta     soundEffectSlot1Init
 @setPaletteColor:
         stx     PPUDATA
         ldy     #$00
-        sty     ppuScrollX
+        ;sty     ppuScrollX
         sty     PPUSCROLL
-        ldy     #$00
-        sty     ppuScrollY
+        ;ldy     #$00
+        ;sty     ppuScrollY
         sty     PPUSCROLL
         rts
+        nop_rep 4
 
 pieceToPpuStatAddr:
         .dbyt   $2186,$21C6,$2206,$2246
         .dbyt   $2286,$22C6,$2306
 levelDisplayTable:
@@ -2569,63 +2633,72 @@ levelDisplayTable:
 multBy10Table:
         .byte   $00,$0A,$14,$1E,$28,$32,$3C,$46
         .byte   $50,$5A,$64,$6E,$78,$82,$8C,$96
         .byte   $A0,$AA,$B4,$BE
 ; addresses
-vramPlayfieldRows:
-        .word   $20C6,$20E6,$2106,$2126
-        .word   $2146,$2166,$2186,$21A6
-        .word   $21C6,$21E6,$2206,$2226
-        .word   $2246,$2266,$2286,$22A6
-        .word   $22C6,$22E6,$2306,$2326
+vramPlayfieldRowsHi:
+        .export vramPlayfieldRowsHi
+        .byte   >$20C6,>$20E6,>$2106,>$2126
+        .byte   >$2146,>$2166,>$2186,>$21A6
+        .byte   >$21C6,>$21E6,>$2206,>$2226
+        .byte   >$2246,>$2266,>$2286,>$22A6
+        .byte   >$22C6,>$22E6,>$2306,>$2326
+vramPlayfieldRowsLo:
+        .export vramPlayfieldRowsLo
+        .byte   <$20C6,<$20E6,<$2106,<$2126
+        .byte   <$2146,<$2166,<$2186,<$21A6
+        .byte   <$21C6,<$21E6,<$2206,<$2226
+        .byte   <$2246,<$2266,<$2286,<$22A6
+        .byte   <$22C6,<$22E6,<$2306,<$2326
 twoDigsToPPU:
-        sta     generalCounter
+        tax             ;sta     generalCounter
         and     #$F0
         lsr     a
         lsr     a
         lsr     a
         lsr     a
         sta     PPUDATA
-        lda     generalCounter
+        txa             ;lda     generalCounter
         and     #$0F
         sta     PPUDATA
         rts
+        nop_rep 2
 
 copyPlayfieldRowToVRAM:
         ldx     vramRow
         cpx     #$15
         bpl     @ret
         lda     multBy10Table,x
         tay
-        txa
-        asl     a
-        tax
-        inx
-        lda     vramPlayfieldRows,x
+        nop     ;txa
+        nop     ;asl     a
+        nop     ;tax
+        nop     ;inx
+        lda     vramPlayfieldRowsHi,x
         sta     PPUADDR
-        dex
+        nop     ;dex
         lda     numberOfPlayers
         cmp     #$01
         beq     @onePlayer
         lda     playfieldAddr+1
         cmp     #$05
         beq     @playerTwo
-        lda     vramPlayfieldRows,x
+        lda     vramPlayfieldRowsLo,x
         sec
-        sbc     #$02
+        sbc     #$04                    ;sbc     #$02
         sta     PPUADDR
         jmp     @copyRow
 
 @playerTwo:
-        lda     vramPlayfieldRows,x
+        lda     vramPlayfieldRowsLo,x
         clc
-        adc     #$0C
+        adc     #$0E                    ;adc     #$0C
         sta     PPUADDR
         jmp     @copyRow
 
 @onePlayer:
-        lda     vramPlayfieldRows,x
+        lda     vramPlayfieldRowsLo,x
         clc
         adc     #$06
         sta     PPUADDR
 @copyRow:
         ldx     #$0A
@@ -2648,16 +2721,16 @@ updateLineClearingAnimation:
         and     #$03
         bne     @ret
         lda     #$00
         sta     generalCounter3
 @whileCounter3LessThan4:
-        ldx     generalCounter3
-        lda     completedRow,x
+        ldx     generalCounter3         ;lda     completedRow,x
+        ldy     completedRow,x
         beq     @nextRow
-        asl     a
-        tay
-        lda     vramPlayfieldRows,y
+        nop     ;asl     a
+        nop     ;tay
+        lda     vramPlayfieldRowsLo,y
         sta     generalCounter
         lda     numberOfPlayers
         cmp     #$01
         bne     @twoPlayers
         lda     generalCounter
@@ -2670,22 +2743,22 @@ @twoPlayers:
         lda     playfieldAddr+1
         cmp     #$04
         bne     @player2
         lda     generalCounter
         sec
-        sbc     #$02
+        sbc     #$04    ;sbc     #$02
         sta     generalCounter
         jmp     @updateVRAM
 
 @player2:
         lda     generalCounter
         clc
-        adc     #$0C
+        adc     #$0E    ;adc     #$0C
         sta     generalCounter
 @updateVRAM:
-        iny
-        lda     vramPlayfieldRows,y
+        nop     ;iny
+        lda     vramPlayfieldRowsHi,y
         sta     generalCounter2
         sta     PPUADDR
         ldx     rowY
         lda     leftColumns,x
         clc
@@ -2719,44 +2792,44 @@ leftColumns:
 rightColumns:
         .byte   $05,$06,$07,$08,$09
 ; Set Background palette 2 and Sprite palette 2
 updatePaletteForLevel:
         lda     player1_levelNumber
-@mod10: cmp     #$0A
-        bmi     @copyPalettes
+        ldy     #$08
+.export updatePaletteForLevel_postConf := *
         sec
+@mod10:
         sbc     #$0A
-        jmp     @mod10
+        bcs     @mod10
+        adc     #$0A
 
 @copyPalettes:
         asl     a
         asl     a
         tax
-        lda     #$00
-        sta     generalCounter
 @copyPalette:
         lda     #$3F
         sta     PPUADDR
-        lda     #$08
-        clc
-        adc     generalCounter
-        sta     PPUADDR
+        sty     PPUADDR
         lda     colorTable,x
         sta     PPUDATA
         lda     colorTable+1,x
         sta     PPUDATA
         lda     colorTable+1+1,x
         sta     PPUDATA
         lda     colorTable+1+1+1,x
         sta     PPUDATA
-        lda     generalCounter
+        tya
         clc
         adc     #$10
-        sta     generalCounter
+        tay
         cmp     #$20
-        bne     @copyPalette
+        bmi     @copyPalette
         rts
+        nop_rep 12
+
+
 
 ; 4 bytes per level (bg, fg, c3, c4)
 colorTable:
         .dbyt   $0F30,$2112,$0F30,$291A
         .dbyt   $0F30,$2414,$0F30,$2A12
@@ -2784,15 +2857,15 @@ @ret:   rts
 
 playState_spawnNextTetrimino:
         lda     vramRow
         cmp     #$20
         bmi     @ret
-        lda     numberOfPlayers
+        lda     activePlayer            ;lda     numberOfPlayers
         cmp     #$01
-        beq     @spawnPiece
-        lda     twoPlayerPieceDelayCounter
-        cmp     #$00
+        beq     @spawn1
+        ldx     twoPlayerPieceDelayPiece;lda     twoPlayerPieceDelayCounter
+        bne     @spawnPiece; always jump;cmp     #$00
         bne     @twoPlayerWaiting
         inc     twoPlayerPieceDelayCounter
         lda     activePlayer
         sta     twoPlayerPieceDelayPlayer
         jsr     chooseNextTetrimino
@@ -2804,29 +2877,29 @@ @twoPlayerWaiting:
         cmp     activePlayer
         bne     @ret
         lda     twoPlayerPieceDelayCounter
         cmp     #$1C
         bne     @ret
+@spawn1:ldx     nextPiece
 @spawnPiece:
         lda     #$00
         sta     twoPlayerPieceDelayCounter
         sta     fallTimer
         sta     tetriminoY
         lda     #$01
         sta     playState
         lda     #$05
         sta     tetriminoX
-        ldx     nextPiece
         lda     spawnOrientationFromOrientation,x
         sta     currentPiece
-        jsr     incrementPieceStat
-        lda     numberOfPlayers
+        jsr     incrementPieceStat_mod
+        lda     activePlayer                    ;lda     numberOfPlayers
         cmp     #$01
         beq     @onePlayerPieceSelection
-        lda     twoPlayerPieceDelayPiece
-        sta     nextPiece
-        jmp     @resetDownHold
+        jsr     chooseNextTetrimino             ;lda     twoPlayerPieceDelayPiece
+        sta     twoPlayerPieceDelayPiece        ;sta     nextPiece
+        bne     @resetDownHold  ; always jump   ;jmp     @resetDownHold
 
 @onePlayerPieceSelection:
         jsr     chooseNextTetrimino
         sta     nextPiece
 @resetDownHold:
@@ -2836,12 +2909,12 @@ @ret:   rts
 
 chooseNextTetrimino:
         lda     gameMode
         cmp     #$05
         bne     pickRandomTetrimino
-        ldx     demoIndex
-        inc     demoIndex
+        jsr_i   chooseNextTetrimino_mod ; ldx     demoIndex
+        nop                             ; inc     demoIndex
         lda     demoTetriminoTypeTable,x
         lsr     a
         lsr     a
         lsr     a
         lsr     a
@@ -2849,43 +2922,43 @@ chooseNextTetrimino:
         tax
         lda     spawnTable,x
         rts
 
 pickRandomTetrimino:
-        jsr     @realStart
-        rts
+        jsr_i   pickRandomTetrimino_mod ;jsr     @realStart
+        nop                             ;rts
 
 @realStart:
-        inc     spawnCount
-        lda     rng_seed
+        inc     spawnCount_
+        lda     personal_rng
         clc
-        adc     spawnCount
+        adc     spawnCount_
         and     #$07
         cmp     #$07
         beq     @invalidIndex
         tax
         lda     spawnTable,x
-        cmp     spawnID
+        cmp     spawnID_
         bne     useNewSpawnID
 @invalidIndex:
-        ldx     #$17
+        ldx     #personal_rng   ;ldx     #$17
         ldy     #$02
         jsr     generateNextPseudorandomNumber
-        lda     rng_seed
+        lda     personal_rng
         and     #$07
         clc
-        adc     spawnID
+        adc     spawnID_
 L992A:  cmp     #$07
         bcc     L9934
         sec
         sbc     #$07
         jmp     L992A
 
 L9934:  tax
         lda     spawnTable,x
 useNewSpawnID:
-        sta     spawnID
+        sta     spawnID_
         rts
 
 tetriminoTypeFromOrientation:
         .byte   $00,$00,$00,$00,$01,$01,$01,$01
         .byte   $02,$02,$03,$04,$04,$05,$05,$05
@@ -3045,12 +3118,12 @@ @checkForStartButton:
         lda     newlyPressedButtons_player1
         cmp     #$10
         bne     @ret2
 @exitGame:
         lda     #$00
-        sta     playState
-        sta     newlyPressedButtons_player1
+        jsr_i   playState_updateGameOverCurtain_curtainFinished_mod     ;sta     playState
+        nop                                                             ;sta     newlyPressedButtons_player1
 @ret2:  rts
 
 playState_checkForCompletedRows:
         lda     vramRow
         cmp     #$20
@@ -3123,11 +3196,11 @@ @incrementLineIndex:
         bmi     @ret
         ldy     completedLines
         lda     garbageLines,y
         clc
         adc     pendingGarbageInactivePlayer
-        sta     pendingGarbageInactivePlayer
+        sta     generalCounter  ; Disable garbage       ;sta     pendingGarbageInactivePlayer
         lda     #$00
         sta     vramRow
         sta     rowY
         lda     completedLines
         cmp     #$04
@@ -3172,13 +3245,13 @@ @fillGarbage:
         cpx     garbageHole
         beq     @hole
         lda     #$78
         jmp     @set
 
-@hole:  lda     #$FF
-@set:   sta     (playfieldAddr),y
-        inx
+@hole:  lda     #$EF
+@set:   jsr_i   playState_receiveGarbage_fillGarbage_mod        ;sta     (playfieldAddr),y
+                                                                ;inx
         cpx     #$0A
         bne     @inc
         ldx     #$00
 @inc:   iny
         cpy     #$C8
@@ -3359,23 +3432,33 @@ L9C75:  lda     score+2
         clc
         adc     #$06
         sta     score+2
 L9C84:  lda     score+2
         and     #$F0
+.ifdef TOURNAMENT_MODE
+        ;this basically is no real fix, it just disables the check
+        cmp     #$FF
+.else
         cmp     #$A0
+.endif
         bcc     L9C94
         lda     #$99
         sta     score
         sta     score+1
         sta     score+2
 L9C94:  dec     generalCounter
         bne     L9C37
         lda     outOfDateRenderFlags
         ora     #$04
         sta     outOfDateRenderFlags
+.ifdef TOURNAMENT_MODE
+        jsr_i   statsPerLineClear_tournamentMode
+        nop
+.else
         lda     #$00
         sta     completedLines
+.endif
         inc     playState
         rts
 
 pointsTable:
         .word   $0000,$0040,$0100,$0300
@@ -3406,11 +3489,11 @@ gameModeState_handleGameOver:
         sta     generalCounter2
         lda     player2_playState
         cmp     #$00
         bne     @ret
 @gameOver:
-        lda     numberOfPlayers
+        lda     #$01    ;lda     numberOfPlayers
         cmp     #$01
         beq     @onePlayerGameOver
         lda     #$09
         sta     gameModeState
         rts
@@ -3455,23 +3538,23 @@ @checkForBlockInRow:
         bne     @foundBlockInRow
         iny
         dex
         bne     @checkForBlockInRow
         lda     allegro
-        beq     @ret
-        lda     #$00
-        sta     allegro
+        jsr_i   updateMusicSpeed_noBlockInRow_mod       ;beq     @ret
+        bne     @ret                                    ;lda     #$00
+        nop                                             ;sta     allegro
         ldx     musicType
         lda     musicSelectionTable,x
         jsr     setMusicTrack
         jmp     @ret
 
 @foundBlockInRow:
         lda     allegro
-        bne     @ret
-        lda     #$FF
-        sta     allegro
+        jsr_i   updateMusicSpeed_foundBlockInRow_mod    ;bne     @ret
+        bne     @ret                                    ;lda     #$FF
+        nop                                             ;sta     allegro
         lda     musicType
         clc
         adc     #$04
         tax
         lda     musicSelectionTable,x
@@ -3487,15 +3570,15 @@ pollControllerButtons:
 
 @demoGameMode:
         lda     demo_recording
         cmp     #$FF
         beq     @recording
-        jsr     pollController
+        jmp_i   demo_pollController_mod ;jsr    pollController
         lda     newlyPressedButtons_player1
-        cmp     #$10
+@demo_pollController_mod_after: cmp     #$10
         beq     @startButtonPressed
-        lda     demo_repeats
+@demo_pollController_mod_skip:  lda     demo_repeats
         beq     @finishedMove
         dec     demo_repeats
         jmp     @moveInProgress
 
 @finishedMove:
@@ -3942,11 +4025,11 @@ byteToBcdTable:
         .byte   $16,$17,$18,$19,$20,$21,$22,$23
         .byte   $24,$25,$26,$27,$28,$29,$30,$31
         .byte   $32,$33,$34,$35,$36,$37,$38,$39
         .byte   $40,$41,$42,$43,$44,$45,$46,$47
         .byte   $48,$49
-; Adjusts high score table and handles data entry, if necessary
+; Adjusts high score table and handles data entry, if necessary; x comes from gameModeState_handleGameOver_mod
 handleHighScoreIfNecessary:
         lda     #$00
         sta     highScoreEntryRawPos
         lda     gameType
         beq     @compareWithPos
@@ -3958,26 +4041,26 @@ @compareWithPos:
         asl     a
         clc
         adc     generalCounter2
         tay
         lda     highScoreScoresA,y
-        cmp     player1_score+2
+        cmp     player1_score+2,x
         beq     @checkHundredsByte
         bcs     @tooSmall
         bcc     adjustHighScores
 @checkHundredsByte:
         iny
         lda     highScoreScoresA,y
-        cmp     player1_score+1
+        cmp     player1_score+1,x
         beq     @checkOnesByte
         bcs     @tooSmall
         bcc     adjustHighScores
 ; This breaks ties by prefering the new score
 @checkOnesByte:
         iny
         lda     highScoreScoresA,y
-        cmp     player1_score
+        cmp     player1_score,x
         beq     adjustHighScores
         bcc     adjustHighScores
 @tooSmall:
         inc     highScoreEntryRawPos
         lda     highScoreEntryRawPos
@@ -4020,22 +4103,22 @@ @clearNameLetter:
         inx
         dey
         bne     @clearNameLetter
         ldx     highScoreEntryRawPos
         lda     highScoreIndexToHighScoreScoresOffset,x
-        tax
-        lda     player1_score+2
-        sta     highScoreScoresA,x
-        inx
-        lda     player1_score+1
-        sta     highScoreScoresA,x
-        inx
-        lda     player1_score
-        sta     highScoreScoresA,x
+        tay     ; swapped to y
+        ldx     tmp3                    ; player offset
+        lda     player1_score+2,x
+        sta     highScoreScoresA,y      ; removed inx from next line
+        lda     player1_score+1,x
+        sta     highScoreScoresA+1,y
+        ;inx
+        lda     player1_score,x
+        sta     highScoreScoresA+2,y
         ldx     highScoreEntryRawPos
-        lda     player1_levelNumber
-        sta     highScoreLevels,x
+        lda     player1_levelNumber,x
+        sta     highScoreLevels,y
         jmp     highScoreEntryScreen
 
 ; reg a: start byte to copy
 copyHighScoreNameToNextIndex:
         sta     generalCounter
@@ -4129,14 +4212,14 @@ highScoreEntryScreen:
         sta     PPUADDR
         lda     #$0A
         clc
         adc     gameType
         sta     PPUDATA
-        jsr     showHighScores
+        jsr     showHighScores_real
         lda     #$02
         sta     renderMode
-        jsr     waitForVBlankAndEnableNmi
+        jsr_i   highScoreEntryScreen_render     ;jsr     waitForVBlankAndEnableNmi
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jsr     updateAudioWaitForNmiAndEnablePpuRendering
         jsr     updateAudioWaitForNmiAndResetOamStaging
         lda     highScoreEntryRawPos
         asl     a
@@ -4164,21 +4247,21 @@ @renderFrame:
         lda     frameCounter
         and     #$03
         bne     @flickerStateSelected_checkForStartPressed
         lda     #$02
         sta     spriteIndexInOamContentLookup
-@flickerStateSelected_checkForStartPressed:
-        jsr     loadSpriteIntoOamStaging
-        lda     newlyPressedButtons_player1
+@flickerStateSelected_checkForStartPressed: 
+        jsr_i   highScoreEntryScreen_get_player ;jsr     loadSpriteIntoOamStaging
+        lda     newlyPressedButtons_player1,x   ; player id (0 or 1) was loaded into x
         and     #$10
         beq     @checkForAOrRightPressed
         lda     #$02
         sta     soundEffectSlot1Init
         jmp     @ret
 
 @checkForAOrRightPressed:
-        lda     newlyPressedButtons_player1
+        lda     newlyPressedButtons_player1,x
         and     #$81
         beq     @checkForBOrLeftPressed
         lda     #$01
         sta     soundEffectSlot1Init
         inc     highScoreEntryNameOffsetForLetter
@@ -4186,22 +4269,22 @@ @checkForAOrRightPressed:
         cmp     #$06
         bmi     @checkForBOrLeftPressed
         lda     #$00
         sta     highScoreEntryNameOffsetForLetter
 @checkForBOrLeftPressed:
-        lda     newlyPressedButtons_player1
+        lda     newlyPressedButtons_player1,x
         and     #$42
         beq     @checkForDownPressed
         lda     #$01
         sta     soundEffectSlot1Init
         dec     highScoreEntryNameOffsetForLetter
         lda     highScoreEntryNameOffsetForLetter
         bpl     @checkForDownPressed
         lda     #$05
         sta     highScoreEntryNameOffsetForLetter
 @checkForDownPressed:
-        lda     heldButtons_player1
+        lda     heldButtons_player1,x
         and     #$04
         beq     @checkForUpPressed
         lda     frameCounter
         and     #$07
         bne     @checkForUpPressed
@@ -4209,24 +4292,24 @@ @checkForDownPressed:
         sta     soundEffectSlot1Init
         lda     highScoreEntryNameOffsetForRow
         sta     generalCounter
         clc
         adc     highScoreEntryNameOffsetForLetter
-        tax
-        lda     highScoreNames,x
+        tay
+        lda     highScoreNames,y
         sta     generalCounter
         dec     generalCounter
         lda     generalCounter
         bpl     @letterDoesNotUnderflow
         clc
         adc     #$2C
         sta     generalCounter
 @letterDoesNotUnderflow:
         lda     generalCounter
-        sta     highScoreNames,x
+        sta     highScoreNames,y
 @checkForUpPressed:
-        lda     heldButtons_player1
+        lda     heldButtons_player1,x
         and     #$08
         beq     @waitForVBlank
         lda     frameCounter
         and     #$07
         bne     @waitForVBlank
@@ -4313,13 +4396,13 @@ gameModeState_startButtonHandling:
 
 @checkIfInGame:
         lda     renderMode
         cmp     #$03
         bne     @ret
-        lda     newlyPressedButtons_player1
-        and     #$10
-        bne     @startPressed
+        nop                             ;lda     newlyPressedButtons_player1
+        jsr_i   isStartNewlyPressed     ;and     #$10
+        beq     @startPressed           ;bne     @startPressed
         jmp     @ret
 
 ; Do nothing if curtain is being lowered
 @startPressed:
         lda     player1_playState
@@ -4344,12 +4427,12 @@ @pauseLoop:
         lda     #$77
         sta     spriteYOffset
         lda     #$05
         sta     spriteIndexInOamContentLookup
         jsr     loadSpriteIntoOamStaging
-        lda     newlyPressedButtons_player1
-        cmp     #$10
+        nop                             ;lda     newlyPressedButtons_player1
+        jsr     isStartNewlyPressed     ;cmp     #$10
         beq     @resume
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jmp     @pauseLoop
 
 @resume:lda     #$1E
